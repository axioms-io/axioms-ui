/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface PasswordlessCode {
        /**
          * Button css class. List of available classes: Size: `btn-sm`, `btn-md`, `btn-lg`.  Color: `btn-primary`, `btn-secondary`, `btn-success`, `btn-info`, `btn-outline-primary`, etc.
         */
        "btnCssClass": string;
        /**
          * Channel to deliver link 'email' or 'sms'
         */
        "channel": string;
        /**
          * Axioms client id
         */
        "clientId": string;
        /**
          * Email field label
         */
        "emailLabel": string;
        /**
          * Email field placeholder
         */
        "emailPlaceholder": string;
        /**
          * Get access token
         */
        "getAccessToken": () => Promise<any>;
        /**
          * Get id token
         */
        "getIdToken": () => Promise<any>;
        /**
          * Get id token payload
         */
        "getIdTokenPayload": () => Promise<any>;
        /**
          * Input css classes. List of available classes: Size: `form-control-sm`, `form-control-md`, `form-control-lg`
         */
        "inputCssClass": string;
        /**
          * Check if user is authenticated or not
         */
        "isAuthenticated": () => Promise<boolean>;
        /**
          * Is custom element used in a pop-up?
         */
        "isPopup": boolean;
        /**
          * Logout user by clearing session
         */
        "logout": () => Promise<void>;
        /**
          * Button label for one-time code verification
         */
        "otpCodeButtonLabel": string;
        /**
          * One-time code field label
         */
        "otpCodeLabel": string;
        /**
          * One-time code field placeholder
         */
        "otpCodePlaceholder": string;
        /**
          * One-time code length. Expected values 6 or 8 depending on tenant settings.
         */
        "otpLength": number;
        /**
          * Phone field label
         */
        "phoneLabel": string;
        /**
          * Phone field placeholder
         */
        "phonePlaceholder": string;
        /**
          * Start button label
         */
        "startButtonLabel": string;
        /**
          * Axioms tenant domain i.e. auth.example.com
         */
        "tenantDomain": string;
    }
    interface PasswordlessLink {
        /**
          * Button css class. List of available classes: Size: `btn-sm`, `btn-md`, `btn-lg`.  Color: `btn-primary`, `btn-secondary`, `btn-success`, `btn-info`, `btn-outline-primary`, etc.
         */
        "btnCssClass": string;
        /**
          * Channel to deliver link 'email' or 'sms'
         */
        "channel": string;
        /**
          * Axioms client id
         */
        "clientId": string;
        /**
          * Email field label
         */
        "emailLabel": string;
        /**
          * Email field placeholder
         */
        "emailPlaceholder": string;
        /**
          * Get access token
         */
        "getAccessToken": () => Promise<any>;
        /**
          * Get id token
         */
        "getIdToken": () => Promise<any>;
        /**
          * Get id token payload
         */
        "getIdTokenPayload": () => Promise<any>;
        /**
          * Input css classes. List of available classes: Size: `form-control-sm`, `form-control-md`, `form-control-lg`
         */
        "inputCssClass": string;
        /**
          * Check if user is authenticated or not
         */
        "isAuthenticated": () => Promise<boolean>;
        /**
          * Is custom element used in a pop-up?
         */
        "isPopup": boolean;
        /**
          * Logout user by clearing session
         */
        "logout": () => Promise<void>;
        /**
          * Phone field label
         */
        "phoneLabel": string;
        /**
          * Phone field placeholder
         */
        "phonePlaceholder": string;
        /**
          * Start button label
         */
        "startButtonLabel": string;
        /**
          * Axioms tenant domain i.e. auth.example.com
         */
        "tenantDomain": string;
    }
}
declare global {
    interface HTMLPasswordlessCodeElement extends Components.PasswordlessCode, HTMLStencilElement {
    }
    var HTMLPasswordlessCodeElement: {
        prototype: HTMLPasswordlessCodeElement;
        new (): HTMLPasswordlessCodeElement;
    };
    interface HTMLPasswordlessLinkElement extends Components.PasswordlessLink, HTMLStencilElement {
    }
    var HTMLPasswordlessLinkElement: {
        prototype: HTMLPasswordlessLinkElement;
        new (): HTMLPasswordlessLinkElement;
    };
    interface HTMLElementTagNameMap {
        "passwordless-code": HTMLPasswordlessCodeElement;
        "passwordless-link": HTMLPasswordlessLinkElement;
    }
}
declare namespace LocalJSX {
    interface PasswordlessCode {
        /**
          * Button css class. List of available classes: Size: `btn-sm`, `btn-md`, `btn-lg`.  Color: `btn-primary`, `btn-secondary`, `btn-success`, `btn-info`, `btn-outline-primary`, etc.
         */
        "btnCssClass"?: string;
        /**
          * Channel to deliver link 'email' or 'sms'
         */
        "channel"?: string;
        /**
          * Axioms client id
         */
        "clientId": string;
        /**
          * Email field label
         */
        "emailLabel"?: string;
        /**
          * Email field placeholder
         */
        "emailPlaceholder"?: string;
        /**
          * Input css classes. List of available classes: Size: `form-control-sm`, `form-control-md`, `form-control-lg`
         */
        "inputCssClass"?: string;
        /**
          * Is custom element used in a pop-up?
         */
        "isPopup"?: boolean;
        /**
          * Emits an event when authentication completed
         */
        "onAuthCompleted"?: (event: CustomEvent<boolean>) => void;
        /**
          * Button label for one-time code verification
         */
        "otpCodeButtonLabel"?: string;
        /**
          * One-time code field label
         */
        "otpCodeLabel"?: string;
        /**
          * One-time code field placeholder
         */
        "otpCodePlaceholder"?: string;
        /**
          * One-time code length. Expected values 6 or 8 depending on tenant settings.
         */
        "otpLength"?: number;
        /**
          * Phone field label
         */
        "phoneLabel"?: string;
        /**
          * Phone field placeholder
         */
        "phonePlaceholder"?: string;
        /**
          * Start button label
         */
        "startButtonLabel"?: string;
        /**
          * Axioms tenant domain i.e. auth.example.com
         */
        "tenantDomain": string;
    }
    interface PasswordlessLink {
        /**
          * Button css class. List of available classes: Size: `btn-sm`, `btn-md`, `btn-lg`.  Color: `btn-primary`, `btn-secondary`, `btn-success`, `btn-info`, `btn-outline-primary`, etc.
         */
        "btnCssClass"?: string;
        /**
          * Channel to deliver link 'email' or 'sms'
         */
        "channel"?: string;
        /**
          * Axioms client id
         */
        "clientId": string;
        /**
          * Email field label
         */
        "emailLabel"?: string;
        /**
          * Email field placeholder
         */
        "emailPlaceholder"?: string;
        /**
          * Input css classes. List of available classes: Size: `form-control-sm`, `form-control-md`, `form-control-lg`
         */
        "inputCssClass"?: string;
        /**
          * Is custom element used in a pop-up?
         */
        "isPopup"?: boolean;
        /**
          * Emits an event when authentication completed
         */
        "onAuthCompleted"?: (event: CustomEvent<boolean>) => void;
        /**
          * Phone field label
         */
        "phoneLabel"?: string;
        /**
          * Phone field placeholder
         */
        "phonePlaceholder"?: string;
        /**
          * Start button label
         */
        "startButtonLabel"?: string;
        /**
          * Axioms tenant domain i.e. auth.example.com
         */
        "tenantDomain": string;
    }
    interface IntrinsicElements {
        "passwordless-code": PasswordlessCode;
        "passwordless-link": PasswordlessLink;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "passwordless-code": LocalJSX.PasswordlessCode & JSXBase.HTMLAttributes<HTMLPasswordlessCodeElement>;
            "passwordless-link": LocalJSX.PasswordlessLink & JSXBase.HTMLAttributes<HTMLPasswordlessLinkElement>;
        }
    }
}
